
一、函数式接口(Functional Interface)

    函数式接口(Functional Interface)是 Java 8对一类特殊类型的接口的称呼。
    这类接口只定义了唯一的抽象方法的接口（除了隐含的Object对象的公共方法），
    因此最开始也就做SAM类型的接口（Single Abstract Method）。
    说白了，所谓的函数式接口，当然首先是一个接口，然后就是在这个接口里面只
    能有一个非 Object 对象的公共方法的抽象方法，可以有多个静态方法和默认方法。
    上面说的是概念，如果你还没看懂，没关系，我们继续通过下面的几个例子，我相信你就会明白。

    JDK 8之前已有的函数式接口
    JDK 8之前已有的 JDK 中提供的支持函数式编程的函数式接口。
        java.lang.Runnable
        java.util.concurrent.Callable
        java.security.PrivilegedAction
        java.util.Comparator
        java.io.FileFilter
        java.nio.file.PathMatcher
        java.lang.reflect.InvocationHandler
        java.beans.PropertyChangeListener
        java.awt.event.ActionListener
        javax.swing.event.ChangeListener
        Java8 中新定义的函数式接口


    1.1、函数式接口概述及特点
        函数式接口： 有且仅有一个抽象方法的接口。
        Java中的函数式编程体现就是Lambda表达式。
        所以函数式接口即可以适用于Lambda使用的接口。

        函数式接口特点
        1、该注解只能标记在"有且仅有一个抽象方法"的接口上。
        2、JDK8接口中的静态方法和默认方法，都不算是抽象方法。
        3、接口默认继承java.lang.Object，所以如果接口显示声明覆盖了Object中方法，那么 也不算抽象方法。

    1.2、如何检测一个接口是不是函数式接口？
        @FunctionalInterface
        放在接口定义的上方：如果接口是函数式接口，编译通过；如果不是，编译失败。

        注意：自定义函数式接口时，@FunctionalInterface是可选的，就算不写这个注解，
        只要保证满足函数式接口定义的条件，也照样是函数式接口。

    1.3、Java8 中有一个 java.util.function 包。其中定义了几组类型的函数式接口以及针对基本数据类型的子接口。

      Predicate：传入一个参数，返回一个bool结果， 方法为boolean test(T t)
      Consumer：传入一个参数，无返回值，纯消费。 方法为void accept(T t)
      Function：传入一个参数，返回一个结果，方法为R apply(T t)
      Supplier：无参数传入，返回一个结果，方法为T get()
      UnaryOperator：一元操作符， 继承Function,传入参数的类型和返回类型相同。
      BinaryOperator：二元操作符， 传入的两个参数的类型和返回类型相同， 继承 BiFunction

    1.4、那么 Java 中为什么需要 @FunctionalInterface 注解呢？

        没有这个注解，我们也可以实现 Lambda 表达式。
        但是 Java 推出 @FunctionalInterface 注解的原因是在 Java Lambda 的实现中，开发组不想再为 Lambda 表达式单独定义一种特殊的 Structural 函数类型，
        称之为箭头类型（arrow type），依然想采用 Java 既有的类型系统(class, interface, method等)。
        增加一个结构化的函数类型会增加函数类型的复杂性，破坏既有的 Java 类型，并对成千上万的 Java 类库造成严重的影响。
        权衡利弊，因此最终还是利用 SAM 接口作为 Lambda 表达式的目标类型。

        函数式接口代表的一种契约，一种对某个特定函数类型的契约。在它出现的地方，实际期望一个符合契约要求的函数。Lambda 表达式不能脱离上下文而存在，
        它必须要有一个明确的目标类型，而这个目标类型就是某个函数式接口。

    1.5、为什么不能用默认方法来重载equals，hashCode和toString？

        接口不能提供对Object类的任何方法的默认实现。从接口里不能提供对equals，hashCode或toString的默认实现。
        因为若可以会很难确定什么时候该调用接口默认的方法。

        如果一个类实现了一个方法，那总是优先于默认的实现的。一旦所有接口的实例都是Object的子类，
        所有接口实例都已经有对equals/hashCode/toString等方法默认实现。
        因此，一个在接口上的这些默认方法都是没用的，它也不会被编译。
        （简单地讲，每一个java类都是Object的子类，也都继承了它类中的equals/hashCode/toString方法，
        那么在类的接口上包含这些默认方法是没有意义的，它们也从来不会被编译。）
